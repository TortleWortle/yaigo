package typegen

import (
	"fmt"
	"os"
	"path/filepath"
	"slices"
	"sort"
	"strings"
	"unicode"
)

func GenerateTypeDefString(toGenerate TsType, export bool) {

}

func GenerateTypeDef(parent TsType, export bool) string {
	types := parent.Children
	var writer strings.Builder
	if export {
		writer.WriteString("export ")
	}
	writer.WriteString(fmt.Sprintf("type %s = {\n", parent.Ident))
	for _, v := range types {
		writer.WriteString("\t")
		writer.WriteString(v.Key)
		if v.Optional {
			writer.WriteString("?")
		}
		writer.WriteString(": ")
		if v.Type == TypeStruct {
			writer.WriteString(v.Ident)
		} else if v.Type == TypeArray {
			writer.WriteString(fmt.Sprintf("%s[]", v.Elem().Ident))
		} else if v.Type == TypeDict {
			writer.WriteString("{\n")
			writer.WriteString(fmt.Sprintf("\t\t[key: %s]: ", v.MapKey().Ident))
			writer.WriteString(v.Elem().Ident)
			if v.Elem().Optional {
				writer.WriteString(" | null")
			}
			writer.WriteString(";\n")
			writer.WriteString("\t}")
		} else {
			writer.WriteString(v.Type)
		}
		writer.WriteString(";\n")
	}

	writer.WriteString("}")
	writer.WriteString("\n")

	return writer.String()
}

func GenerateTypeScript(typeDir string, component string, props map[string]any, optionals []string) error {
	types, err := ConvertMap(props)
	if err != nil {
		return fmt.Errorf("ConvertMap: %w", err)
	}
	componentName, err := FormatComponentName(component)
	if err != nil {
		return fmt.Errorf("formatting component name: %w", err)
	}
	var typesWithOptionals []TsType

	for _, t := range types {
		if slices.Contains(optionals, t.Key) {
			t.Optional = true
		}
		typesWithOptionals = append(typesWithOptionals, t)
	}

	types = typesWithOptionals

	typeDefCache := make(identCache)
	typeDefCache[componentName] = types
	getTypeDefs(typeDefCache, types)

	// sort alphabetically
	var typeDefs []TsType
	for ident, subTypes := range typeDefCache {
		typ, err := NewRootType(ident, subTypes)
		if err != nil {
			return fmt.Errorf("creating root type for %s: %w", ident, err)
		}
		typeDefs = append(typeDefs, typ)
	}

	sort.Slice(typeDefs, func(i, j int) bool {
		return strings.Map(unicode.ToUpper, typeDefs[i].Ident) < strings.Map(unicode.ToUpper, typeDefs[j].Ident)
	})

	for _, td := range typeDefs {
		f, err := os.OpenFile(filepath.Join(typeDir, fmt.Sprintf("%s.ts", td.Ident)), os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
		if err != nil {
			return fmt.Errorf("typegen file: %w", err)
		}
		var builder strings.Builder
		builder.WriteString("// Code generated by yaigo. DO NOT EDIT.\n")

		var hasImported bool
		for _, std := range td.Children {
			if std.Type == TypeStruct {
				if !hasImported {
					builder.WriteString("\n")
					hasImported = true
				}
				builder.WriteString(fmt.Sprintf("import { type %s } from './%s'\n", std.Ident, std.Ident))
			}
		}

		builder.WriteString("\n")
		builder.WriteString(GenerateTypeDef(td, true))
		_, err = f.Write([]byte(builder.String()))
		if err != nil {
			f.Close()
			return fmt.Errorf("writing file: %w", err)
		}
		f.Close()
	}

	return nil
}
